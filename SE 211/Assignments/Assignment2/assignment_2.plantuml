@startuml SE 211: Assignment 2

' Styles
skinparam classAttributeIconSize 0


' Title
title
SE 211: Assignment 2
Aidan Holland (adh346)
end title

' Packages
package "CSV Library" {
  class CSVParser
  exception CSVParseException
  class CSVRow
  class CSVRowWithHeaders
  class CSVTable
  class CSVReader
  class CSVWriter
}
package "CSV Library Tests" {
  note as N
    Test CSV Files
    - simple.csv
    - quotes.csv
    - escaped_quotes.csv
    - headers.csv
    - headers_and_quotes.csv
    - headers_and_escaped_quotes.csv
  end note
  class CSVParserTest
  class CSVRowTest
  class CSVRowWithHeadersTest
  class CSVTableTest
  class CSVReaderTest
  class CSVWriterTest
}

' Classes
exception CSVParseException extends java.lang.Exception {
  ' Fields
  -message: String
  ' Constructors
  +CSVParseException(String message)
}

class CSVParser {
  ' Constants
  +{static}DEFAULT_DELIMITER: char = ','
  +{static}DEFAULT_QUOTE: char = '"'
  +{static}DEFAULT_ESCAPE: char = '\\'
  +{static}DEFAULT_HAS_HEADERS: boolean = false
  ' Fields
  -delimiter: char
  -quote: char
  -escape: char
  -hasHeaders: boolean
  ' Constructors
  +CSVParser()
  +CSVParser(char delimiter)
  +CSVParser(char delimiter, char quote)
  +CSVParser(char delimiter, char quote, char escape)
  +CSVParser(char delimiter, char quote, char escape, boolean hasHeaders)
  ' Methods
  +getDelimiter(): char
  +setDelimiter(char delimiter): void
  +getQuote(): char
  +setQuote(char quote): void
  +getEscape(): char
  +setEscape(char escape): void
  +parseLine(String line): CSVRow
  +parse(String input): CSVTable
  +parseFile(String filename): CSVTable
  -detectDelimiter(String input): char
}
CSVParser --> CSVParseException
CSVParser --> CSVRow
CSVParser --> CSVTable

class CSVRow {
  ' Fields
  -values: ArrayList<String>
  ' Constructors
  +CSVRow()
  +CSVRow(ArrayList<String> values)
  ' Methods
  +get(int index): String
  +size(): int
}

class CSVRowWithHeaders extends CSVRow {
  ' Fields
  -headers: CSVRow
  ' Constructors
  +CSVRowWithHeaders()
  +CSVRowWithHeaders(ArrayList<String> values, CSVRow headers)
  +CSVRowWithHeaders(ArrayList<String> values, ArrayList<String> headers)
  ' Methods
  +get(String header): String
  +hasHeaders(): boolean
  +getHeaders(): CSVRow
  +setHeaders(CSVRow headers): void
  +setHeaders(ArrayList<String> headers): void
}

class CSVTable {
  ' Fields
  -rows: ArrayList<CSVRow>
  -headers: CSVRow
  ' Constructors
  +CSVTable()
  +CSVTable(ArrayList<CSVRow> rows)
  +CSVTable(ArrayList<CSVRow> rows, CSVRow headers)
  +CSVTable(ArrayList<CSVRow> rows, ArrayList<String> headers)
  ' Methods
  +getRows(): ArrayList<CSVRow>
  +getRow(int index): CSVRow
  +getRowWithHeaders(int index): CSVRowWithHeaders
  +getRowsWithHeaders(): ArrayList<CSVRowWithHeaders>
  +getRowCount(): int
  +size(): int
  +hasHeaders(): boolean
  +getHeaders(): CSVRow
  +setHeaders(CSVRow headers): void
  +setHeaders(ArrayList<String> headers): void
  +getHeadersCount(): int
  +getHeaderIndex(String header): int
  +getHeaderIndex(String header, boolean ignoreCase): int
}

class CSVReader {
  ' Fields
  -reader: BufferedReader
  -parser: CSVParser
  ' Constructors
  +CSVReader(String filename)
  +CSVReader(String filename, CSVParser parser)
  ' Methods
  +read(): CSVRow
  +readAll(): CSVTable
  +close(): void
}
CSVReader --> java.io.BufferedReader
CSVReader --> CSVParser
CSVReader --> CSVRow

class CSVWriter {
  ' Fields
  -writer: BufferedWriter
  -parser: CSVParser
  ' Constructors
  +CSVWriter(String filename)
  +CSVWriter(String filename, CSVParser parser)
  ' Methods
  +write(CSVRow row): void
  +write(CSVTable table): void
  +close(): void
}
CSVWriter --> java.io.BufferedWriter
CSVWriter --> CSVParser
CSVWriter --> CSVRow

' Tests
class CSVParserTest {
  ' Fields
  -parser: CSVParser
  ' Methods
  -setUp(): void
  +testParseLine(): void
  +testParse(): void
  +testParseFile(): void
  +testDetectDelimiter(): void
}
CSVParserTest --> CSVParser

class CSVRowTest {
  ' Fields
  -row: CSVRow
  ' Methods
  -setUp(): void
  +testGet(): void
  +testSize(): void
}
CSVRowTest --> CSVRow

class CSVRowWithHeadersTest {
  ' Fields
  -row: CSVRowWithHeaders
  ' Methods
  -setUp(): void
  +testGet(): void
  +testHasHeaders(): void
  +testGetHeaders(): void
  +testSetHeaders(): void
}
CSVRowWithHeadersTest --> CSVRowWithHeaders

class CSVTableTest {
  ' Fields
  -table: CSVTable
  ' Methods
  -setUp(): void
  +testGetRows(): void
  +testGetRow(): void
  +testGetRowWithHeaders(): void
  +testGetRowsWithHeaders(): void
  +testGetRowCount(): void
  +testSize(): void
  +testHasHeaders(): void
  +testGetHeaders(): void
  +testSetHeaders(): void
  +testGetHeadersCount(): void
  +testGetHeaderIndex(): void
}
CSVTableTest --> CSVTable

class CSVReaderTest {
  ' Fields
  -reader: CSVReader
  ' Methods
  -setUp(): void
  +testRead(): void
  +testReadAll(): void
  +testClose(): void
}
CSVReaderTest --> CSVReader

class CSVWriterTest {
  ' Fields
  -writer: CSVWriter
  ' Methods
  -setUp(): void
  +testWrite(): void
  +testWriteAll(): void
  +testClose(): void
}
CSVWriterTest --> CSVWriter

' Main
class Main {
  ' Methods
  +main(String[] args): void
}
Main --> CSVParser
Main --> CSVRow
Main --> CSVRowWithHeaders
Main --> CSVTable
Main --> CSVReader
Main --> CSVWriter

@enduml
